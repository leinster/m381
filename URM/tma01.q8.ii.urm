(n, m) -> n - m, if m <= n
(n, m) -> m, if n < m

 1 J(2, 3, 7)
 2 J(1, 3, 5)
 3 S(3)
 4 J(1, 1, 1)

 5 C(2, 1)
 6 J(1, 1, 20)

 7 Z(3)
 8 J(1, 2, 12)
 9 S(2)
10 S(3)
11 J(1, 1, 8)
12 C(3, 1)

Instructions 1 to 6 are based on the min program of Example 2.3. However, we need to ensure that if m = n we return n - m. This requires checking the value m stored in register R_2, against that in R_3 before we test the value n stored in register R_1. Hence instructions 1 and 2 are swapped in our program.

If n < m, we jump to instruction 5, copying r_2 into register R_1, and then jump beyond the end of the program to stop with the required output, m.

If r_2 = r_3, then m <= n, so we jump to instruction 7 and the part of the program that deals
with subtracting m from n. It first zeros R_3.

We know that m <= n, and we test whether r_1 = r_2. If so, n = m, so n - m = 0 and we can stop. Otherwise we enter a loop, incrementing r_2 and r_3 and then testing again whether r_1 = r_2. Since r_3 is incremented in step with r_2, when r_2 = r_1, r_3 = n - m.
